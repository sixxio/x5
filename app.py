import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import random

from tensorflow.keras.models import load_model
import pickle, numpy as np

st.set_page_config(layout = 'wide', page_title = 'AI Talent Hub | X5', page_icon = 'üõí')
px.set_mapbox_access_token(st.secrets['mapbox'])


data = pd.read_parquet('all_with_avg.parquet.gz')

st.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Å–µ—Ç–∏ –ü—è—Ç—ë—Ä–æ—á–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')

# a1,b1,c1 = st.tabs(['–ö–∞—Ä—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –æ—Ü–µ–Ω–∫–∏', '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –æ—Ç–∑—ã–≤–∞–º'])

a1,b1 = st.tabs(['–ö–∞—Ä—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –æ—Ü–µ–Ω–∫–∏'])

with a1:

    a,b = st.columns((9,1))

    with b:
        regions = ['–í—Å–µ'] + data['breadcrumbs_1'].dropna().unique().tolist()
        depth = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω', regions, index = 0)
        if depth == '–í—Å–µ':
            subregions = ['–í—Å–µ'] + data['breadcrumbs_2'].dropna().unique().tolist()
        else:
            subregions = ['–í—Å–µ'] + data[data["breadcrumbs_1"]==depth]['breadcrumbs_2'].dropna().unique().tolist()
        depth1 = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—Ä–µ–≥–∏–æ–Ω', subregions, index = 0)

        metric = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É', [f'–°—Ä–µ–¥–Ω–µ–µ –∑–∞ {i*7} {"–¥–µ–Ω—å" if i%3==0 else "–¥–Ω–µ–π"}' for i in range(1, 5)] + ['–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞'])
        metric = {'–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π':'7d_avg','–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 14 –¥–Ω–µ–π':'14d_avg','–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 21 –¥–µ–Ω—å':'21d_avg','–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 28 –¥–Ω–µ–π':'28d_avg','–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞': 'rating'}[metric]
        st.write(f'#### –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ ___{round(data[metric].mean(), 2) if depth1 == "–í—Å–µ" else round(data[data["breadcrumbs_1"]==depth].rating.mean(), 2) }___')

    if depth != '–í—Å–µ':
        if depth1 != '–í—Å–µ':
            data = data[(data['breadcrumbs_1']==depth)&(data['breadcrumbs_2']==depth1)]
        else:
            data = data[data['breadcrumbs_1']==depth]
    else:
        if depth1 != '–í—Å–µ':
            data = data[(data['breadcrumbs_2']==depth1)]

    data[metric] = data[metric].round(2)
    # Display the map
    with a:
        fig = px.scatter_mapbox(
            data, lat="lat", lon="long", hover_name="address",
            zoom=10, hover_data = {'lat' : False, 'long' : False},
            color_continuous_scale = [(0, "red"), (0.5, 'yellow'), (1, "green")], 
            color = metric, range_color=(3, 5))
        fig.update_traces(marker={'opacity': 0.9, 'size':10})
        fig.update_layout(autosize=False, height=800)
        fig.update_layout(mapbox_style="dark")
        st.plotly_chart(fig, use_container_width=True)

with b1:
    with open('tokenizer.pickle', 'rb') as handle:
        tokenizer = pickle.load(handle)
    model = load_model('model.h5')

    current_review = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞')
    if st.button('–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É'):
        tokenized_review = tokenizer.texts_to_sequences([current_review])
        tokenized_review = [tokenized_review[0] + [0 for i in range(len(tokenized_review[0]), 20000)]]
        rate = np.argmax(model.predict(tokenized_review)) + 1
        st.write('–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–∏–≤—à–∏–π —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤, –æ—Ü–µ–Ω–∏–ª –º–∞–≥–∞–∑–∏–Ω –ü—è—Ç—ë—Ä–æ—á–∫–∞ –≤ ' + ':star:'*rate + ' –∑–≤—ë–∑–¥.')

# with c1:
#     a2,b2 = st.columns([4,1])
#     with b2:
#         rate_1 = st.selectbox('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã', ['–í—Å–µ'] + [f'–° –æ—Ü–µ–Ω–∫–æ–π –Ω–∏–∂–µ {i}' for i in range(5,2,-1)])
#         rate_1 = 6 if rate_1 == '–í—Å–µ' else int(rate_1[-1]) 

#     with a2:
#         reviews = pd.read_parquet('all_reviews.parquet.gz').sort_values(by='date', ascending=False)
#         reviews = reviews[reviews['rate'] < rate_1]
#         for i in range(25):
#             cur_review = reviews.iloc[[i]]
#             with st.chat_message('human'):
#                 color = {1: ':red[', 2: ':red[', 3: ':red[', 4: ':orange[', 5:':green['}
#                 st.write(cur_review.iloc[0].date.strftime('%H:%M %d.%m.%Y'), '|', f"{data[data['id'] == cur_review.iloc[0].id].iloc[0]['address']}", '|', ':star:'*cur_review.iloc[0].rate)
#                 st.write(color[cur_review.iloc[0].rate] + cur_review.iloc[0].text.replace('[','').replace(']','') + ']')

